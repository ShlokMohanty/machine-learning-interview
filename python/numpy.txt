Numpy :
numerical python , is one of the most important foundational packages for numerical computing 
in python.
things that we may find interesting in numpy are :
1) ndarray , an efficient multidimensional array providing fast array-oriented arithmetic operations
and flexible broadcasting capabilities .

2) Mathematical functions for fast operations on entire array of data without having to write loops.
3)Tools for reading/writing array data to disk and working with the memory mapped files.
4) A C API for connecting Numpy with libraries written in c,c++, or fortran .

most imp areas for a data analyst to keep working on data using numpy :
1) data munguing and cleaning --> Fast vectorized array operations 
2) algorithms like sorting , unique, and set operations 
3) descriptive stats and aggregating /summarizing data 
4) relational data manipulations for merging and joining together heterogeneous datasets.
5) expressing conditional logic as array expressions instead of loops with if-elif-else branches 
6) Group-wise data manipulations 

specially on tabular most of the analysts will use ---> pandas for tabular data .
time series manipulation is not present in numpy .

without the need for python loops numpy makes the advantage of doing the computations .

multiplying each sequence by 2 :
my_arr = np.arange(1000000)
%time for _ in range(10): 
my_arr2 = my_arr * 2

cpu times : user 20 ms , sys: 50 ms , total = 70ms
wall time: 72.4 ms

%time for _ in range(10)
my list2 = [x * 2 for x in my_list]
cpu times : user 760 ms , sys: 290 ms, total: 1.05 s
wall time : 1.05 s 

ndarray : a multidimensional array object :

batch computations on built in python objects 

import numpy as np 
data = np.random.randn(2,3)
data 
output ([[-0.2047,-0.4,-0.5],
	[-0.5,1.9,1.3]])

data.shape 
output : (2,3)

data.dtype 
output : float64

creating ndarrays :
data1 = [6, 7.5, 8, 0, 1]

arr1 = np.array(data1)

arr1
output: ([6, 7.5, 8, 0, 1])

data2 = [[1,2,3,4],[5,6,7,8]]
arr2 = np.array(data2)
arr2
output: 2d form 

arr2.ndim 
output: 2

arr2.shape 
output:(2,4)

np.zeros(10)
output : ([0,0,0,0,0,0,0,0,0,0])

np.zeros((3,6))
output: 3 rows and 6 cols of zeros created 

arr1 = np.array([1,2,3], dtype=np.float64)
arr2 = np.array([1,2,3], dtype=np.int32)
arr1.dtype
output: dtype('float64')

dtypes are the source for numpys flexibility for interacting with data coming from other 
systems.

using ndarray astype method we can convert an array from one dtype to another.
arr = np.array([1,2,3,4,5])
arr.dtype 
output : dtype('int64')

float_arr = arr.astype(np.float64)
float_arr.dtype
output: dtype('float64')

arithmetic with numpy arrays :

arr = np. array([[1., 2., 3.],[4., 5., 6.]])
arr
output: ([[1. , 2., 3.],
	 [4. , 5. , 6.]])
arr * arr
output: ([[2., 4. , 9.],
	[16., 25., 36.]])

arr - arr
output : values result after subtracting the corresponding array elements 

1/arr
output: 

basic indexing and slicing :
arr = np.arange(10)
arr
output: array([0,1,2,3,4,5,6,7,8,9])
arr[5]
output: 5

arr[5:8]
output: ([5,6,7])

arr[5:8] = 12
arr
output: ([0,1,2,3,4,12,12,12,8,9])

arr_slice[1] = 12345
arr
output: array([0,1,2,3,4,12,12345, 12 , 8, 9])

arr_slice[:] = 64
arr
array([0,1,2,3,4,64,64,64,8,9])

arr2d = np.array([[1,2,3], [4,5,6], [7,8,9]])
arr2d[2]
output array([7,8,9])

arr2d[0][2]
output: 3

arr2d[0, 2]
output: 3

arr3d = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])
arr3d
output: ([[[1,2,3],
	 [4,5,6]],
	  [7,8,9],
	  [10,11,12]]])

arr3d[0]
output: ([[1,2,3],[4,5,6]])
old_values = arr3d[0].copy()
arr3d[0] = 42
arr3d
output: 
array([[[42, 42, 42],
	[42, 42, 42],
       [[7, 8, 9],
	[10,11,12]]])

arr3d[1,0]
output: array([7, 8, 9])

x = arr3d[1]
x
output: array([7,8,9],
	      [10,11,12])
x[0]
output: array([7,8,9])
indexing with slices :

arr
output: array([0,1,2,3,4,64,64,64,8,9])
arr[1:6]
output: array([1,2,3,4,64])

arr[:2,1:]

arr2d[:, :1]

Boolean Indexing :

name = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
data = np .random.randn(7, 4)
names 
output: array(['Bob','Joe', 'will','Bob', 'will', 'Joe', 'Joe'], dtype='<U4')

names = 'Bob'
output: array([True, False, False, True, Flase, False, Flase], dtype=bool)
data[names =='Bob']
